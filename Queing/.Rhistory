lq <- numeric(length = n) # contribution to the occupancy of the queue
l <- numeric(length = n) # contribution to the occupancy of the waiting system
lt <- numeric(length = n) # average occupancy at time i
L <- 0 # average occupancy of the waiting system
LQ <- 0 # Average occupancy in the queue per client
W <- 0 # average time in the waiting system per client
WQ <- 0 # average time in the queue per client
# Generate queueing system data
for(i in 1:n){
if(i==1){
ts[i] <- 0
}else{ ts[i] <- max(theta[i-1],t[i]) } # arrival time intance to the waiting system for client i
theta[i] <- ts[i] + x[i] # exit time instance for client i from the W.S.
if(i<n){ t[i+1] <- t[i] + tau[i] } # entrance time instnace to W.S for for client i+1
# Compute step statistics
l[i] <- w[i] <- theta[i] - t[i]
L <- L + l[i]
lt[i] <- L/(t[i]-t[1])
W <- W + w[i]
lq[i] <- wq[i] <- ts[i]-t[i]
LQ <- LQ + lq[i]
WQ <- WQ + wq[i]
# Add average occupancy to data frame
#stable[j,i] <- lt[i]
#stable[j+10,i] <- t[i]
}
# Calculate simulation statistics
W <- W/n
WQ <- WQ/n
L <- L/(t[n]-t[1])
LQ <- LQ/(t[n]-t[1])
# Add statistics to data frame
simStats[j,] <- c(W,WQ,L,LQ)
}
View(simStats)
rm(list=ls())
load_factor <- c(0.4,0.7,0.85,0.925) ## loading factors
exp_tau <- 79 ## Expected value of interarrivals
a <- 0.3135 ## Shape Parameter
exp_service <- c(load_factor*exp_tau) ## Expected value of service time
b <- c(exp_service/gamma((a+1)/a)) ## Scale Parameter
set.seed(7000)
service_1 <- rweibull(10000,a,b[1]) ## Service times for loading factor of 0.4
service_2 <- rweibull(10000,a,b[2]) ## Service times for loading factor of 0.7
service_3 <- rweibull(10000,a,b[3]) ## Service times for loading factor of 0.85
service_4 <- rweibull(10000,a,b[4]) ## Service times for loading factor of 0.925
qplot(service_1,geom="histogram",binwidth = 5,main = "Service Times (loading factor = 0.4)", xlab = "Count", ylab = "Service Time",fill=I("blue"), col=I("black"),alpha=I(.2),xlim=(c(0,600)),ylim=(c(0,1500)))
qplot(service_2,geom="histogram",binwidth = 5,main = "Service Times (loading factor = 0.7)", xlab = "Count", ylab = "Service Time",fill=I("blue"), col=I("black"),alpha=I(.2),xlim=(c(0,600)),ylim=(c(0,1500)))
qplot(service_3,geom="histogram",binwidth = 5,main = "Service Times (loading factor = 0.85)", xlab = "Count", ylab = "Service Time",fill=I("blue"), col=I("black"),alpha=I(.2),xlim=(c(0,600)),ylim=(c(0,1500)))
qplot(service_4,geom="histogram",binwidth = 5,main = "Service Times (loading factor = 0.925)", xlab = "Count", ylab = "Service Time",fill=I("blue"), col=I("black"),alpha=I(.2),xlim=(c(0,600)),ylim=(c(0,1500)))
meanSample <- c(mean(service_1),mean(service_2),mean(service_3),mean(service_4))
varSample <- c(var(service_1),var(service_2),var(service_3),var(service_4))
stdSample <- c(sd(service_1),sd(service_2),sd(service_3),sd(service_4))
medSample <- c(median(service_1),median(service_2),median(service_3),median(service_4))
meanTheoretical <- b*gamma((a+1)/a)
varTheoretical <- b*b*(gamma((a+2)/a)-gamma((a+1)/a)^2)
stdTheoretical <- sqrt(varTheoretical) ## Correct??
medTheoretical <- b*(log(2)^(1/a))
meanTheoretical/meanSample
varTheoretical/varSample
stdTheoretical/stdSample
medTheoretical/medSample
seeds <- c(2000,2220,3784,2120,2500,2600,2293,2384,2948,3094) # random seems
n <- 100000 # number of arrivals to simulate
simStats <- data.frame(matrix(NA, nrow = 10, ncol = 4)) # data frame to house the simulation statistics
colnames(statistics) <- c("L","LQ","W","WQ")
stable <- data.frame(matrix(NA,nrow = 20, ncol = 100000)) # data frame to house the average occupancy stats
loadfactor <- 1
for(j in 1:10){
# initialize all variables
set.seed(seeds[j])
x <- rweibull(n,a,b[loadfactor])
tau <- rgamma(n,scale = 19.75, shape =4)
x <- numeric(length = n) # service time
theta <- numeric(length = n) # exit time instance
ts <- numeric(length = n) # arrival time instance to the service system
t <- numeric(length = n) # arrival time instance to the waiting system
tau <- numeric(length = n) # interarrival time
w <- numeric(length = n) # sojourn time in waiting system
wq <- numeric(length = n) # sojourn time in queue
lq <- numeric(length = n) # contribution to the occupancy of the queue
l <- numeric(length = n) # contribution to the occupancy of the waiting system
lt <- numeric(length = n) # average occupancy at time i
L <- 0 # average occupancy of the waiting system
LQ <- 0 # Average occupancy in the queue per client
W <- 0 # average time in the waiting system per client
WQ <- 0 # average time in the queue per client
# Generate queueing system data
for(i in 1:n){
if(i==1){
ts[i] <- 0
}else{ ts[i] <- max(theta[i-1],t[i]) } # arrival time intance to the waiting system for client i
theta[i] <- ts[i] + x[i] # exit time instance for client i from the W.S.
if(i<n){ t[i+1] <- t[i] + tau[i] } # entrance time instnace to W.S for for client i+1
# Compute step statistics
l[i] <- w[i] <- theta[i] - t[i]
L <- L + l[i]
lt[i] <- L/(t[i]-t[1])
W <- W + w[i]
lq[i] <- wq[i] <- ts[i]-t[i]
LQ <- LQ + lq[i]
WQ <- WQ + wq[i]
# Add average occupancy to data frame
#stable[j,i] <- lt[i]
#stable[j+10,i] <- t[i]
}
# Calculate simulation statistics
W <- W/n
WQ <- WQ/n
L <- L/(t[n]-t[1])
LQ <- LQ/(t[n]-t[1])
# Add statistics to data frame
simStats[j,] <- c(W,WQ,L,LQ)
}
View(simStats)
View(simStats)
rm(list =ls())
load_factor <- c(0.4,0.7,0.85,0.925) ## loading factors
exp_tau <- 79 ## Expected value of interarrivals
a <- 0.3135 ## Shape Parameter
exp_service <- c(load_factor*exp_tau) ## Expected value of service time
b <- c(exp_service/gamma((a+1)/a)) ## Scale Parameter
seeds <- c(2000,2220,3784,2120,2500,2600,2293,2384,2948,3094) # random seems
n <- 100000 # number of arrivals to simulate
simStats <- data.frame(matrix(NA, nrow = 10, ncol = 4)) # data frame to house the simulation statistics
colnames(statistics) <- c("L","LQ","W","WQ")
colnames(simStats) <- c("L","LQ","W","WQ")
loadfactor <- 1
for(j in 1:10){
# initialize all variables
set.seed(seeds[j])
x <- rweibull(n,a,b[loadfactor])
tau <- rgamma(n,scale = 19.75, shape =4)
x <- numeric(length = n) # service time
theta <- numeric(length = n) # exit time instance
ts <- numeric(length = n) # arrival time instance to the service system
t <- numeric(length = n) # arrival time instance to the waiting system
tau <- numeric(length = n) # interarrival time
w <- numeric(length = n) # sojourn time in waiting system
wq <- numeric(length = n) # sojourn time in queue
lq <- numeric(length = n) # contribution to the occupancy of the queue
l <- numeric(length = n) # contribution to the occupancy of the waiting system
lt <- numeric(length = n) # average occupancy at time i
L <- 0 # average occupancy of the waiting system
LQ <- 0 # Average occupancy in the queue per client
W <- 0 # average time in the waiting system per client
WQ <- 0 # average time in the queue per client
# Generate queueing system data
for(i in 1:n){
if(i==1){
ts[i] <- 0
}else{ ts[i] <- max(theta[i-1],t[i]) } # arrival time intance to the waiting system for client i
theta[i] <- ts[i] + x[i] # exit time instance for client i from the W.S.
if(i<n){ t[i+1] <- t[i] + tau[i] } # entrance time instnace to W.S for for client i+1
# Compute step statistics
l[i] <- w[i] <- theta[i] - t[i]
L <- L + l[i]
lt[i] <- L/(t[i]-t[1])
W <- W + w[i]
lq[i] <- wq[i] <- ts[i]-t[i]
LQ <- LQ + lq[i]
WQ <- WQ + wq[i]
# Add average occupancy to data frame
#stable[j,i] <- lt[i]
#stable[j+10,i] <- t[i]
}
# Calculate simulation statistics
W <- W/n
WQ <- WQ/n
L <- L/(t[n]-t[1])
LQ <- LQ/(t[n]-t[1])
# Add statistics to data frame
simStats[j,] <- c(W,WQ,L,LQ)
}
View(simStats)
simStats <- data.frame(matrix(NA, nrow = 10, ncol = 4)) # data frame to house the simulation statistics
colnames(simStats) <- c("L","LQ","W","WQ")
loadfactor <- 1
for(j in 1:10){
# initialize all variables
set.seed(seeds[j])
x <- rweibull(n,a,b[loadfactor])
tau <- rgamma(n,scale = 19.75, shape =4)
x <- numeric(length = n) # service time
theta <- numeric(length = n) # exit time instance
ts <- numeric(length = n) # arrival time instance to the service system
t <- numeric(length = n) # arrival time instance to the waiting system
tau <- numeric(length = n) # interarrival time
w <- numeric(length = n) # sojourn time in waiting system
wq <- numeric(length = n) # sojourn time in queue
lq <- numeric(length = n) # contribution to the occupancy of the queue
l <- numeric(length = n) # contribution to the occupancy of the waiting system
lt <- numeric(length = n) # average occupancy at time i
L <- 0 # average occupancy of the waiting system
LQ <- 0 # Average occupancy in the queue per client
W <- 0 # average time in the waiting system per client
WQ <- 0 # average time in the queue per client
# Generate queueing system data
for(i in 1:n){
if(i==1){
ts[i] <- 0
}else{ ts[i] <- max(theta[i-1],t[i]) } # arrival time intance to the waiting system for client i
theta[i] <- ts[i] + x[i] # exit time instance for client i from the W.S.
if(i<n){ t[i+1] <- t[i] + tau[i] } # entrance time instnace to W.S for for client i+1
# Compute step statistics
l[i] <- w[i] <- theta[i] - t[i]
L <- L + l[i]
lt[i] <- L/(t[i]-t[1])
W <- W + w[i]
lq[i] <- wq[i] <- ts[i]-t[i]
LQ <- LQ + lq[i]
WQ <- WQ + wq[i]
# Add average occupancy to data frame
#stable[j,i] <- lt[i]
#stable[j+10,i] <- t[i]
}
# Calculate simulation statistics
W <- W/n
WQ <- WQ/n
L <- L/(t[n]-t[1])
LQ <- LQ/(t[n]-t[1])
# Add statistics to data frame
simStats[j,] <- c(W,WQ,L,LQ)
}
View(simStats)
x
for(j in 1:10){
# initialize all variables
set.seed(seeds[j])
x <- rweibull(n,a,b[loadfactor]) # service time
tau <- rgamma(n,scale = 19.75, shape =4) # interarrival time
theta <- numeric(length = n) # exit time instance
ts <- numeric(length = n) # arrival time instance to the service system
t <- numeric(length = n) # arrival time instance to the waiting system
w <- numeric(length = n) # sojourn time in waiting system
wq <- numeric(length = n) # sojourn time in queue
lq <- numeric(length = n) # contribution to the occupancy of the queue
l <- numeric(length = n) # contribution to the occupancy of the waiting system
lt <- numeric(length = n) # average occupancy at time i
L <- 0 # average occupancy of the waiting system
LQ <- 0 # Average occupancy in the queue per client
W <- 0 # average time in the waiting system per client
WQ <- 0 # average time in the queue per client
# Generate queueing system data
for(i in 1:n){
if(i==1){
ts[i] <- 0
}else{ ts[i] <- max(theta[i-1],t[i]) } # arrival time intance to the waiting system for client i
theta[i] <- ts[i] + x[i] # exit time instance for client i from the W.S.
if(i<n){ t[i+1] <- t[i] + tau[i] } # entrance time instnace to W.S for for client i+1
# Compute step statistics
l[i] <- w[i] <- theta[i] - t[i]
L <- L + l[i]
lt[i] <- L/(t[i]-t[1])
W <- W + w[i]
lq[i] <- wq[i] <- ts[i]-t[i]
LQ <- LQ + lq[i]
WQ <- WQ + wq[i]
# Add average occupancy to data frame
#stable[j,i] <- lt[i]
#stable[j+10,i] <- t[i]
}
# Calculate simulation statistics
W <- W/n
WQ <- WQ/n
L <- L/(t[n]-t[1])
LQ <- LQ/(t[n]-t[1])
# Add statistics to data frame
simStats[j,] <- c(W,WQ,L,LQ)
}
View(simStats)
for(j in 1:10){
# initialize all variables
set.seed(seeds[j])
x <- rweibull(n,.812,b[loadfactor]) # service time
tau <- rgamma(n,scale = 19.75, shape =4) # interarrival time
theta <- numeric(length = n) # exit time instance
ts <- numeric(length = n) # arrival time instance to the service system
t <- numeric(length = n) # arrival time instance to the waiting system
w <- numeric(length = n) # sojourn time in waiting system
wq <- numeric(length = n) # sojourn time in queue
lq <- numeric(length = n) # contribution to the occupancy of the queue
l <- numeric(length = n) # contribution to the occupancy of the waiting system
lt <- numeric(length = n) # average occupancy at time i
L <- 0 # average occupancy of the waiting system
LQ <- 0 # Average occupancy in the queue per client
W <- 0 # average time in the waiting system per client
WQ <- 0 # average time in the queue per client
# Generate queueing system data
for(i in 1:n){
if(i==1){
ts[i] <- 0
}else{ ts[i] <- max(theta[i-1],t[i]) } # arrival time intance to the waiting system for client i
theta[i] <- ts[i] + x[i] # exit time instance for client i from the W.S.
if(i<n){ t[i+1] <- t[i] + tau[i] } # entrance time instnace to W.S for for client i+1
# Compute step statistics
l[i] <- w[i] <- theta[i] - t[i]
L <- L + l[i]
lt[i] <- L/(t[i]-t[1])
W <- W + w[i]
lq[i] <- wq[i] <- ts[i]-t[i]
LQ <- LQ + lq[i]
WQ <- WQ + wq[i]
# Add average occupancy to data frame
#stable[j,i] <- lt[i]
#stable[j+10,i] <- t[i]
}
# Calculate simulation statistics
W <- W/n
WQ <- WQ/n
L <- L/(t[n]-t[1])
LQ <- LQ/(t[n]-t[1])
# Add statistics to data frame
simStats[j,] <- c(W,WQ,L,LQ)
}
View(simStats)
for(j in 1:10){
# initialize all variables
set.seed(seeds[j])
x <- rweibull(n,.625,b[loadfactor]) # service time
tau <- rgamma(n,scale = 19.75, shape =4) # interarrival time
theta <- numeric(length = n) # exit time instance
ts <- numeric(length = n) # arrival time instance to the service system
t <- numeric(length = n) # arrival time instance to the waiting system
w <- numeric(length = n) # sojourn time in waiting system
wq <- numeric(length = n) # sojourn time in queue
lq <- numeric(length = n) # contribution to the occupancy of the queue
l <- numeric(length = n) # contribution to the occupancy of the waiting system
lt <- numeric(length = n) # average occupancy at time i
L <- 0 # average occupancy of the waiting system
LQ <- 0 # Average occupancy in the queue per client
W <- 0 # average time in the waiting system per client
WQ <- 0 # average time in the queue per client
# Generate queueing system data
for(i in 1:n){
if(i==1){
ts[i] <- 0
}else{ ts[i] <- max(theta[i-1],t[i]) } # arrival time intance to the waiting system for client i
theta[i] <- ts[i] + x[i] # exit time instance for client i from the W.S.
if(i<n){ t[i+1] <- t[i] + tau[i] } # entrance time instnace to W.S for for client i+1
# Compute step statistics
l[i] <- w[i] <- theta[i] - t[i]
L <- L + l[i]
lt[i] <- L/(t[i]-t[1])
W <- W + w[i]
lq[i] <- wq[i] <- ts[i]-t[i]
LQ <- LQ + lq[i]
WQ <- WQ + wq[i]
# Add average occupancy to data frame
#stable[j,i] <- lt[i]
#stable[j+10,i] <- t[i]
}
# Calculate simulation statistics
W <- W/n
WQ <- WQ/n
L <- L/(t[n]-t[1])
LQ <- LQ/(t[n]-t[1])
# Add statistics to data frame
simStats[j,] <- c(W,WQ,L,LQ)
}
View(simStats)
for(j in 1:10){
# initialize all variables
set.seed(seeds[j])
x <- rweibull(n,a,b[loadfactor]) # service time
tau <- rgamma(n,scale = 19.75, shape =4) # interarrival time
theta <- numeric(length = n) # exit time instance
ts <- numeric(length = n) # arrival time instance to the service system
t <- numeric(length = n) # arrival time instance to the waiting system
w <- numeric(length = n) # sojourn time in waiting system
wq <- numeric(length = n) # sojourn time in queue
lq <- numeric(length = n) # contribution to the occupancy of the queue
l <- numeric(length = n) # contribution to the occupancy of the waiting system
lt <- numeric(length = n) # average occupancy at time i
L <- 0 # average occupancy of the waiting system
LQ <- 0 # Average occupancy in the queue per client
W <- 0 # average time in the waiting system per client
WQ <- 0 # average time in the queue per client
# Generate queueing system data
for(i in 1:n){
if(i==1){
ts[i] <- 0
}else{ ts[i] <- max(theta[i-1],t[i]) } # arrival time intance to the waiting system for client i
theta[i] <- ts[i] + x[i] # exit time instance for client i from the W.S.
if(i<n){ t[i+1] <- t[i] + tau[i] } # entrance time instnace to W.S for for client i+1
# Compute step statistics
l[i] <- w[i] <- theta[i] - t[i]
L <- L + l[i]
lt[i] <- L/(t[i]-t[1])
W <- W + w[i]
lq[i] <- wq[i] <- ts[i]-t[i]
LQ <- LQ + lq[i]
WQ <- WQ + wq[i]
# Add average occupancy to data frame
#stable[j,i] <- lt[i]
#stable[j+10,i] <- t[i]
}
# Calculate simulation statistics
W <- W/n
WQ <- WQ/n
L <- L/(t[n]-t[1])
LQ <- LQ/(t[n]-t[1])
# Add statistics to data frame
simStats[j,] <- c(W,WQ,L,LQ)
}
View(simStats)
plot(tau)
plot(tau)
plot(x)
plot(x,ylim=(0,200))
?plot
mean(tau)
mean(x)
mean(x)
mean(tau)
mean(x)/mean(tau)
for(j in 1:10){
# initialize all variables
set.seed(seeds[j])
x <- rweibull(n,a,b[loadfactor]) # service time
tau <- rgamma(n,scale = 19.75, shape =4) # interarrival time
theta <- numeric(length = n) # exit time instance
ts <- numeric(length = n) # arrival time instance to the service system
t <- numeric(length = n) # arrival time instance to the waiting system
w <- numeric(length = n) # sojourn time in waiting system
wq <- numeric(length = n) # sojourn time in queue
lq <- numeric(length = n) # contribution to the occupancy of the queue
l <- numeric(length = n) # contribution to the occupancy of the waiting system
lt <- numeric(length = n) # average occupancy at time i
L <- 0 # average occupancy of the waiting system
LQ <- 0 # Average occupancy in the queue per client
W <- 0 # average time in the waiting system per client
WQ <- 0 # average time in the queue per client
# Generate queueing system data
for(i in 1:n){
if(i==1){
ts[i] <- 0
}else{ ts[i] <- max(theta[i-1],t[i]) } # arrival time intance to the waiting system for client i
theta[i] <- ts[i] + x[i] # exit time instance for client i from the W.S.
if(i<n){ t[i+1] <- t[i] + tau[i] } # entrance time instnace to W.S for for client i+1
# Compute step statistics
l[i] <- w[i] <- theta[i] - t[i]
L <- L + l[i]
lt[i] <- L/(t[i]-t[1])
W = W + w[i]
lq[i] <- wq[i] <- ts[i]-t[i]
LQ <- LQ + lq[i]
WQ <- WQ + wq[i]
# Add average occupancy to data frame
#stable[j,i] <- lt[i]
#stable[j+10,i] <- t[i]
}
# Calculate simulation statistics
W <- W/n
WQ <- WQ/n
L <- L/(t[n]-t[1])
LQ <- LQ/(t[n]-t[1])
# Add statistics to data frame
simStats[j,] <- c(W,WQ,L,LQ)
}
View(simStats)
plot(t,ti)
plot(t,lt)
plot(t,lt)
plot(t,lt)
L <- (L/(t[n]-t[1]))
L
for(j in 1:10){
# initialize all variables
set.seed(seeds[j])
x <- rweibull(n,a,b[loadfactor]) # service time
tau <- rgamma(n,scale = 19.75, shape =4) # interarrival time
theta <- numeric(length = n) # exit time instance
ts <- numeric(length = n) # arrival time instance to the service system
t <- numeric(length = n) # arrival time instance to the waiting system
w <- numeric(length = n) # sojourn time in waiting system
wq <- numeric(length = n) # sojourn time in queue
lq <- numeric(length = n) # contribution to the occupancy of the queue
l <- numeric(length = n) # contribution to the occupancy of the waiting system
lt <- numeric(length = n) # average occupancy at time i
L <- 0 # average occupancy of the waiting system
LQ <- 0 # Average occupancy in the queue per client
W <- 0 # average time in the waiting system per client
WQ <- 0 # average time in the queue per client
# Generate queueing system data
for(i in 1:n){
if(i==1){
ts[i] <- 0
}else{ ts[i] <- max(theta[i-1],t[i]) } # arrival time intance to the waiting system for client i
theta[i] <- ts[i] + x[i] # exit time instance for client i from the W.S.
if(i<n){ t[i+1] <- t[i] + tau[i] } # entrance time instnace to W.S for for client i+1
# Compute step statistics
l[i] <- w[i] <- theta[i] - t[i]
L <- L + l[i]
lt[i] <- L/(t[i]-t[1])
W <- W + w[i]
lq[i] <- wq[i] <- ts[i]-t[i]
LQ <- LQ + lq[i]
WQ <- WQ + wq[i]
# Add average occupancy to data frame
#stable[j,i] <- lt[i]
#stable[j+10,i] <- t[i]
}
# Calculate simulation statistics
W <- W/n
WQ <- WQ/n
L <- (L/(t[n]-t[1]))
LQ <- (LQ/(t[n]-t[1]))
# Add statistics to data frame
simStats[j,] <- c(L,LQ,W,WQ)
}
View(simStats)
